defaultTasks 'run'

apply plugin: 'java'
apply plugin: 'eclipse'

group   'io.github.smartoperatingblock'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

repositories {
    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url "https://repo.gradle.org/gradle/libs-releases" }

    flatDir { dirs 'lib' }

    mavenCentral()
}

dependencies {
    implementation('org.jacamo:jacamo:1.1')
}

sourceSets {
    main {
        java {
            srcDir 'src/env'
            srcDir 'src/agt'
            srcDir 'src/org'
            srcDir 'src/int'
            srcDir 'src/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

task run (type: JavaExec, dependsOn: 'classes') {
    group       ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'automation_management_microservice.jcm'
    // jvmArgs '-Xss15m'
    classpath sourceSets.main.runtimeClasspath
}


task uberJar(type: Jar, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'creates a single runnable jar file with all dependencies'
    duplicatesStrategy 'exclude'

    manifest {
        attributes 'Main-Class': 'jacamo.infra.JaCaMoLauncher'
    }
    archiveBaseName = 'jacamo-automation_management_microservice' // the name must start with jacamo so that jacamo...jar is found in the classpath
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from (project.projectDir.absolutePath) {
        include '**/*.asl'
        include '**/*.xml'
        include '**/*.sai'
        include '**/*.ptl'
        include '**/*.jcm'
        include '*.properties'
    }
    from (project.buildDir.absolutePath + '/jcm') {
        include '**/*'
    }
    with jar

    doFirst {
        copy {
            from 'automation_management_microservice.jcm'
            rename 'automation_management_microservice.jcm','default.jcm'
            into project.buildDir.absolutePath + '/jcm'
        }
    }
}

clean {
    delete 'bin'
    delete 'build'
    delete 'log'
}
